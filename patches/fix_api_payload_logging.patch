--- a/src/mcp_atlassian/rest/base.py
+++ b/src/mcp_atlassian/rest/base.py
@@ -8,6 +8,7 @@ from typing import Any, TypeVar, cast
 
 import requests
 
+from mcp_atlassian.utils.logging import mask_sensitive
 from mcp_atlassian.exceptions import (
     MCPAtlassianAuthenticationError,
     MCPAtlassianConfigError,
@@ -228,6 +229,41 @@ class BaseRESTClient:
         """Make a request to the REST API."""
         method = method.upper()
         url = self._build_url(endpoint)
+        
+        def sanitize_json_data(data: Any) -> Any:
+            """Recursively sanitize sensitive data in JSON payloads."""
+            if isinstance(data, dict):
+                sanitized = {}
+                sensitive_keys = {
+                    'password', 'api_key', 'apikey', 'token', 'secret', 
+                    'client_secret', 'refresh_token', 'access_token',
+                    'authorization', 'auth', 'key', 'private_key',
+                    'webhook_secret', 'oauth', 'bearer', 'pat',
+                    'ssn', 'creditcard', 'credit_card', 'dateofbirth',
+                    'date_of_birth', 'dob'
+                }
+                
+                for key, value in data.items():
+                    key_lower = key.lower().replace('_', '').replace('-', '')
+                    if any(sensitive in key_lower for sensitive in sensitive_keys):
+                        sanitized[key] = mask_sensitive(str(value)) if value else None
+                    elif isinstance(value, (dict, list)):
+                        sanitized[key] = sanitize_json_data(value)
+                    elif isinstance(value, str) and '@' in value and '.' in value:
+                        # Potentially an email - mask the local part
+                        parts = value.split('@')
+                        if len(parts) == 2:
+                            sanitized[key] = f"{mask_sensitive(parts[0], keep_chars=2)}@{parts[1]}"
+                        else:
+                            sanitized[key] = value
+                    else:
+                        sanitized[key] = value
+                return sanitized
+            elif isinstance(data, list):
+                return [sanitize_json_data(item) for item in data]
+            else:
+                return data
+        
         kwargs: dict[str, Any] = {
             "method": method,
             "url": url,
@@ -238,8 +274,9 @@ class BaseRESTClient:
 
         if json_data is not None:
             kwargs["json"] = json_data
-            logger.info("[DEBUG] Full JSON payload being sent to API:")
-            logger.info(f"[DEBUG] {json_module.dumps(json_data, indent=2)}")
+            # Log sanitized version of the payload
+            safe_data = sanitize_json_data(json_data)
+            logger.debug(f"API request payload (sanitized): {json_module.dumps(safe_data, indent=2)}")
         if params:
             kwargs["params"] = params