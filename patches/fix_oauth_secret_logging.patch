--- a/src/mcp_atlassian/utils/oauth.py
+++ b/src/mcp_atlassian/utils/oauth.py
@@ -11,6 +11,7 @@ from typing import Any, cast

 import requests

+from mcp_atlassian.utils.logging import mask_sensitive
 from mcp_atlassian.utils.logging import get_masked_session_headers

 logger = logging.getLogger("mcp-atlassian.utils.oauth")
@@ -104,7 +105,16 @@ class OAuthConfig:
             }

             logger.info(f"Exchanging authorization code for tokens at {TOKEN_URL}")
-            logger.debug(f"Token exchange payload: {pprint.pformat(payload)}")
+            # Mask sensitive data before logging
+            safe_payload = {
+                "grant_type": payload["grant_type"],
+                "client_id": payload["client_id"],
+                "client_secret": mask_sensitive(payload["client_secret"]),
+                "code": mask_sensitive(payload["code"]),
+                "redirect_uri": payload["redirect_uri"],
+            }
+            logger.debug(f"Token exchange payload: {pprint.pformat(safe_payload)}")
+            del safe_payload  # Clear from memory

             response = requests.post(TOKEN_URL, data=payload)
