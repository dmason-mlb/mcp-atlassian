--- a/src/mcp_atlassian/formatting/router.py
+++ b/src/mcp_atlassian/formatting/router.py
@@ -5,6 +5,7 @@ from __future__ import annotations
 import logging
 import re
 import time
+import threading
 from typing import Any, Literal, TypedDict
 
 from cachetools import TTLCache
@@ -58,6 +59,7 @@ class FormatRouter:
         self.adf_generator = ASTBasedADFGenerator()
         self.wiki_generator = WikiMarkupGenerator()
         self.deployment_cache: TTLCache = TTLCache(maxsize=cache_size, ttl=cache_ttl)
+        self.cache_lock = threading.Lock()
         self.detection_metrics = {
             "detection_count": 0,
             "cache_hits": 0,
@@ -104,11 +106,13 @@ class FormatRouter:
         key = base_url.lower().strip()
         
         # Check cache first
-        cached_type = self.deployment_cache.get(key)
-        if cached_type is not None:
-            self.detection_metrics["cache_hits"] += 1
-            logger.debug(f"Cache hit for {key}: {cached_type}")
-            return cached_type
+        with self.cache_lock:
+            cached_type = self.deployment_cache.get(key)
+            if cached_type is not None:
+                self.detection_metrics["cache_hits"] += 1
+                logger.debug(f"Cache hit for {key}: {cached_type}")
+                return cached_type
+        
         self.detection_metrics["cache_misses"] += 1
         
         # Normalize URL for pattern matching
@@ -129,7 +133,8 @@ class FormatRouter:
             deployment_type = "unknown"
         
         # Cache the result
-        self.deployment_cache[key] = deployment_type
+        with self.cache_lock:
+            self.deployment_cache[key] = deployment_type
         
         end_time = time.time()
         detection_time = end_time - start_time